-- |
-- Module      : FTLex.Lexer.Base
-- Copyright   : (c) 2024-2025, Marcel SchÃ¼tz
-- License     : LGPL-3
-- Maintainer  : marcel.schuetz@fau.de
--
-- Abstract lexer type.

module FTLex.Lexer.Base (
  Lexer,
  runLexer,
  allowedChars,

  Lines(..),
  splitText
) where

import Data.Text (Text)
import Data.Text qualified as Text
import Data.Set (Set)
import Data.Set qualified as Set
import Control.Monad.Trans.State.Strict (evalState, State)
import Text.Megaparsec hiding (State, Pos, label)


-- * Lexing

type Lexer errorType stateType resultType = ParsecT errorType Text (State stateType) resultType

-- | Run a lexer and pass the result (either a list of lexemes or an error)
-- to a given function or error handler.
runLexer :: (Monad m)
         => Lexer errorType stateType resultType
         -- ^ Lexer to run
         -> stateType
         -- ^ Initial lexing state
         -> Text
         -- ^ Input text
         -> (ParseErrorBundle Text errorType -> m resultType)
         -- ^ Error handler
         -> m resultType
runLexer lexer initState text e =
  case evalState (runParserT lexer "" text) initState of
    Left err -> e err
    Right lexemes -> pure lexemes


-- * Allowed Characters for Character-Based Lexing

-- | Characters that are accepted by the character-based lexers.
allowedChars :: Set Char
allowedChars = basicLatin `Set.union` latin1supplement `Set.union` isabelleSymbols
  where
    basicLatin = Set.fromAscList ['\x0000' .. '\x007f']
    latin1supplement = Set.fromAscList ['\x0080' .. '\x00ff']
    isabelleSymbols = Set.fromAscList [
        '\x000a1',
        '\x000a2',
        '\x000a3',
        '\x000a4',
        '\x000a5',
        '\x000a6',
        '\x000a7',
        '\x000a8',
        '\x000a9',
        '\x000aa',
        '\x000ab',
        '\x000ac',
        '\x000ae',
        '\x000af',
        '\x000b0',
        '\x000b1',
        '\x000b4',
        '\x000b6',
        '\x000b7',
        '\x000b8',
        '\x000ba',
        '\x000bb',
        '\x000bc',
        '\x000bd',
        '\x000be',
        '\x000bf',
        '\x000d7',
        '\x000f7',
        '\x00131',
        '\x002dd',
        '\x00393',
        '\x00394',
        '\x00398',
        '\x0039b',
        '\x0039e',
        '\x003a0',
        '\x003a3',
        '\x003a5',
        '\x003a6',
        '\x003a8',
        '\x003a9',
        '\x003b1',
        '\x003b2',
        '\x003b3',
        '\x003b4',
        '\x003b5',
        '\x003b6',
        '\x003b7',
        '\x003b8',
        '\x003b9',
        '\x003ba',
        '\x003bb',
        '\x003bc',
        '\x003bd',
        '\x003be',
        '\x003c0',
        '\x003c1',
        '\x003c3',
        '\x003c4',
        '\x003c5',
        '\x003c6',
        '\x003c7',
        '\x003c8',
        '\x003c9',
        '\x003f5',
        '\x02010',
        '\x02015',
        '\x02016',
        '\x02020',
        '\x02021',
        '\x02026',
        '\x02032',
        '\x02039',
        '\x0203a',
        '\x02040',
        '\x0204b',
        '\x020ac',
        '\x02102',
        '\x0210D',
        '\x0210b',
        '\x0210c',
        '\x02110',
        '\x02111',
        '\x02112',
        '\x02115',
        '\x02118',
        '\x02119',
        '\x0211a',
        '\x0211b',
        '\x0211c',
        '\x0211d',
        '\x02124',
        '\x02127',
        '\x02128',
        '\x0212c',
        '\x0212d',
        '\x02130',
        '\x02131',
        '\x02133',
        '\x02135',
        '\x02190',
        '\x02191',
        '\x02192',
        '\x02193',
        '\x02194',
        '\x02195',
        '\x0219d',
        '\x021A0',
        '\x021A3',
        '\x021F8',
        '\x021FB',
        '\x021a6',
        '\x021a9',
        '\x021aa',
        '\x021bc',
        '\x021bd',
        '\x021be',
        '\x021be',
        '\x021bf',
        '\x021c0',
        '\x021c1',
        '\x021c2',
        '\x021c3',
        '\x021cc',
        '\x021d0',
        '\x021d1',
        '\x021d2',
        '\x021d3',
        '\x021d4',
        '\x021d5',
        '\x021d6',
        '\x021d7',
        '\x021d8',
        '\x021d9',
        '\x021da',
        '\x021db',
        '\x021e0',
        '\x021e2',
        '\x021e4',
        '\x021e7',
        '\x021e9',
        '\x02200',
        '\x02202',
        '\x02203',
        '\x02204',
        '\x02205',
        '\x02207',
        '\x02208',
        '\x02209',
        '\x0220f',
        '\x02210',
        '\x02211',
        '\x02213',
        '\x02216',
        '\x02217',
        '\x02218',
        '\x02219',
        '\x0221a',
        '\x0221d',
        '\x0221e',
        '\x02220',
        '\x02225',
        '\x02227',
        '\x02228',
        '\x02229',
        '\x0222a',
        '\x0222b',
        '\x0222e',
        '\x02237',
        '\x0223c',
        '\x02240',
        '\x02243',
        '\x02245',
        '\x02248',
        '\x0224d',
        '\x02250',
        '\x0225c',
        '\x02260',
        '\x02261',
        '\x02264',
        '\x02265',
        '\x0226a',
        '\x0226b',
        '\x02272',
        '\x02273',
        '\x0227a',
        '\x0227b',
        '\x0227c',
        '\x0227d',
        '\x02282',
        '\x02283',
        '\x02286',
        '\x02287',
        '\x0228e',
        '\x0228f',
        '\x02290',
        '\x02291',
        '\x02292',
        '\x02293',
        '\x02294',
        '\x02295',
        '\x02296',
        '\x02297',
        '\x02298',
        '\x02299',
        '\x022FF',
        '\x022a2',
        '\x022a3',
        '\x022a4',
        '\x022a5',
        '\x022a8',
        '\x022a9',
        '\x022ab',
        '\x022b2',
        '\x022b3',
        '\x022b4',
        '\x022b5',
        '\x022c0',
        '\x022c1',
        '\x022c2',
        '\x022c3',
        '\x022c4',
        '\x022c5',
        '\x022c6',
        '\x022c8',
        '\x022ef',
        '\x02302',
        '\x02308',
        '\x02309',
        '\x0230a',
        '\x0230b',
        '\x02311',
        '\x02322',
        '\x02323',
        '\x02326',
        '\x023ce',
        '\x02500',
        '\x02501',
        '\x02508',
        '\x02509',
        '\x02550',
        '\x025B7',
        '\x025C1',
        '\x025a1',
        '\x025a9',
        '\x025aa',
        '\x025b3',
        '\x025b8',
        '\x025b9',
        '\x025c3',
        '\x025c7',
        '\x025ca',
        '\x025cb',
        '\x0261b',
        '\x02660',
        '\x02661',
        '\x02662',
        '\x02663',
        '\x0266d',
        '\x0266e',
        '\x0266f',
        '\x02710',
        '\x02713',
        '\x02717',
        '\x02756',
        '\x02759',
        '\x027a7',
        '\x027e6',
        '\x027e7',
        '\x027e8',
        '\x027e9',
        '\x027ea',
        '\x027eb',
        '\x027f5',
        '\x027f6',
        '\x027f7',
        '\x027f8',
        '\x027f9',
        '\x027fa',
        '\x027fc',
        '\x02900',
        '\x0290e',
        '\x0290f',
        '\x02914',
        '\x02915',
        '\x02916',
        '\x0291c',
        '\x02981',
        '\x02982',
        '\x02983',
        '\x02984',
        '\x02987',
        '\x02988',
        '\x02989',
        '\x0298A',
        '\x029F9',
        '\x02A1F',
        '\x02A21',
        '\x02A3E',
        '\x02A64',
        '\x02A65',
        '\x02a00',
        '\x02a01',
        '\x02a02',
        '\x02a04',
        '\x02a05',
        '\x02a06',
        '\x02a1d',
        '\x02a3f',
        '\x02a85',
        '\x02a86',
        '\x02aa2',
        '\x02af4',
        '\x02afd',
        '\x02aff',
        '\x02b1a',
        '\x1D538',
        '\x1D53B',
        '\x1D53C',
        '\x1D53D',
        '\x1D53E',
        '\x1D540',
        '\x1D541',
        '\x1D542',
        '\x1D543',
        '\x1D544',
        '\x1D546',
        '\x1D54A',
        '\x1D54B',
        '\x1D54C',
        '\x1D54D',
        '\x1D54E',
        '\x1D54F',
        '\x1D550',
        '\x1F310',
        '\x1F4D3',
        '\x1F5C0',
        '\x1F5CF',
        '\x1d49c',
        '\x1d49e',
        '\x1d49f',
        '\x1d4a2',
        '\x1d4a5',
        '\x1d4a6',
        '\x1d4a9',
        '\x1d4aa',
        '\x1d4ab',
        '\x1d4ac',
        '\x1d4ae',
        '\x1d4af',
        '\x1d4b0',
        '\x1d4b1',
        '\x1d4b2',
        '\x1d4b3',
        '\x1d4b4',
        '\x1d4b5',
        '\x1d504',
        '\x1d505',
        '\x1d507',
        '\x1d508',
        '\x1d509',
        '\x1d50a',
        '\x1d50d',
        '\x1d50e',
        '\x1d50f',
        '\x1d510',
        '\x1d511',
        '\x1d512',
        '\x1d513',
        '\x1d514',
        '\x1d516',
        '\x1d517',
        '\x1d518',
        '\x1d519',
        '\x1d51a',
        '\x1d51b',
        '\x1d51c',
        '\x1d51e',
        '\x1d51f',
        '\x1d520',
        '\x1d521',
        '\x1d522',
        '\x1d523',
        '\x1d524',
        '\x1d525',
        '\x1d526',
        '\x1d527',
        '\x1d528',
        '\x1d529',
        '\x1d52a',
        '\x1d52b',
        '\x1d52c',
        '\x1d52d',
        '\x1d52e',
        '\x1d52f',
        '\x1d530',
        '\x1d531',
        '\x1d532',
        '\x1d533',
        '\x1d534',
        '\x1d535',
        '\x1d536',
        '\x1d537',
        '\x1d539',
        '\x1d5ba',
        '\x1d5bb',
        '\x1d5bc',
        '\x1d5bd',
        '\x1d5be',
        '\x1d5bf',
        '\x1d5c0',
        '\x1d5c1',
        '\x1d5c2',
        '\x1d5c3',
        '\x1d5c4',
        '\x1d5c5',
        '\x1d5c6',
        '\x1d5c7',
        '\x1d5c8',
        '\x1d5c9',
        '\x1d5ca',
        '\x1d5cb',
        '\x1d5cc',
        '\x1d5cd',
        '\x1d5ce',
        '\x1d5cf',
        '\x1d5d0',
        '\x1d5d1',
        '\x1d5d2',
        '\x1d5d3',
        '\x1d7ec',
        '\x1d7ed',
        '\x1d7ee',
        '\x1d7ef',
        '\x1d7f0',
        '\x1d7f1',
        '\x1d7f2',
        '\x1d7f3',
        '\x1d7f4',
        '\x1d7f5'
      ]


-- * Legacy Dependencies

-- ** Splitting the Input Text

data Lines =
    MiddleLine Text Text Lines
    -- ^ A line that is *not* the last line of a text, its subsequent line break
    -- and its following lines.
  | LastLine Text
    -- ^ The last line of a text

-- | Split a text into lines
splitText :: Text -> Lines
splitText text =
  let (beforeBreak, rest) = Text.break (`elem` ['\r', '\n']) text
  in case Text.uncons rest of
    Just ('\r', rest') -> case Text.uncons rest' of
      Just ('\n', rest'') -> MiddleLine beforeBreak "\r\n" $ splitText rest''
      _ -> MiddleLine beforeBreak "\r" $ splitText rest'
    Just ('\n', rest') -> MiddleLine beforeBreak "\n" $ splitText rest'
    _ -> LastLine beforeBreak


